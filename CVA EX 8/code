# EX 8

A PyTorch implementation of Object Detection with Single Shot Detector

import torch
import torchvision
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

# Load the SSD model using torchvision.models.detection.ssdlite320_mobilenet_v3_large
model = torchvision.models.detection.ssdlite320_mobilenet_v3_large(pretrained=True)

# Set the model to evaluation mode
model.eval()

# Define the COCO class names
coco_classes = [
'__background__', 'person', 'bicycle', 'car', 'motorcycle', 'airplane',
'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'N/A',
'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse',
'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'N/A', 'backpack',
'umbrella', 'N/A', 'N/A', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis',
'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove',
'skateboard', 'surfboard', 'tennis racket', 'bottle', 'N/A', 'wine glass',
'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich',
'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake',
'chair', 'couch', 'potted plant', 'bed', 'N/A', 'dining table', 'N/A',
'N/A', 'toilet', 'N/A', 'tv', 'laptop', 'mouse', 'remote', 'keyboard',
'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator',
'N/A', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier',
'toothbrush'
]

# Load an example image
image_path = '/content/images.jpg'
image = Image.open(image_path)
# Convert the image to a tensor
image_tensor = torchvision.transforms.functional.to_tensor(image)

image_tensor = image_tensor.unsqueeze(0)
# Pass the image tensor through the model to get the predictions
with torch.no_grad():
  output = model(image_tensor)

# Get the predicted bounding boxes, scores, and labels
boxes = output[0]['boxes'].detach().cpu().numpy()
scores = output[0]['scores'].detach().cpu().numpy()
labels = output[0]['labels'].detach().cpu().numpy()

# Print the predicted labels and scores for each object
for box, score, label in zip(boxes, scores, labels):
  if score > 0.5:
    print(coco_classes[label], score)

# Draw the predicted bounding boxes on the image
fig, ax = plt.subplots(1)
ax.imshow(image)
for box, score, label in zip(boxes, scores, labels):
  if score > 0.5:
    box = box.tolist()
    print(coco_classes[label], score)
    ax.add_patch(plt.Rectangle((box[0], box[1]), box[2]-box[0], box[3]-box[1],fill=False, edgecolor='red', linewidth=2))
plt.show()
